<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.boke.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.boke.pojo.User">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="account" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="nick_name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="cpassword" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="role" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="email" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="github_addr" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="csdn_addr" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    id, account, nick_name, cpassword, role, email, github_addr, csdn_addr, create_time, 
    update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.boke.pojo.User">
    insert into user (id, account, nick_name, 
      cpassword, role, email, 
      github_addr, csdn_addr, create_time, 
      update_time)
    values (#{id,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR}, #{nickName,jdbcType=VARCHAR}, 
      #{cpassword,jdbcType=VARCHAR}, #{role,jdbcType=INTEGER}, #{email,jdbcType=VARCHAR}, 
      #{githubAddr,jdbcType=VARCHAR}, #{csdnAddr,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.boke.pojo.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="account != null">
        account,
      </if>
      <if test="nickName != null">
        nick_name,
      </if>
      <if test="cpassword != null">
        cpassword,
      </if>
      <if test="role != null">
        role,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="githubAddr != null">
        github_addr,
      </if>
      <if test="csdnAddr != null">
        csdn_addr,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="account != null">
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null">
        #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="cpassword != null">
        #{cpassword,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        #{role,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="githubAddr != null">
        #{githubAddr,jdbcType=VARCHAR},
      </if>
      <if test="csdnAddr != null">
        #{csdnAddr,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.boke.pojo.User">
    update user
    <set>
      <if test="account != null">
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null">
        nick_name = #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="cpassword != null">
        cpassword = #{cpassword,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        role = #{role,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="githubAddr != null">
        github_addr = #{githubAddr,jdbcType=VARCHAR},
      </if>
      <if test="csdnAddr != null">
        csdn_addr = #{csdnAddr,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.boke.pojo.User">
    update user
    set account = #{account,jdbcType=VARCHAR},
      nick_name = #{nickName,jdbcType=VARCHAR},
      cpassword = #{cpassword,jdbcType=VARCHAR},
      role = #{role,jdbcType=INTEGER},
      email = #{email,jdbcType=VARCHAR},
      github_addr = #{githubAddr,jdbcType=VARCHAR},
      csdn_addr = #{csdnAddr,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectUserByAccount" parameterType="string" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    from user
    WHERE account=#{account}
  </select>

  <select id="selectUserByAccountAndPasswd" parameterType="map" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    from user
    WHERE account=#{account}
    and cpassword=#{password}
  </select>
</mapper>